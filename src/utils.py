
"""
generates a dictionary of a word's chaacter frequencies:
for instance, an input of "RARER" will output {"R":3,"A":1,"E":1} 
"""
def get_character_dict(word):
  character_dict = {}
  for char in word: 
    if char in character_dict:
      character_dict[char] += 1
    else: 
      character_dict[char] = 1
  return character_dict

"""
returns the Wordle color sequence that results from making a guess at the mystery word

for instance, get_color_sequence(guess = "CRANE", mystery_word = "BRAIN")
will output ["gray","green","green","yellow","gray], as the R and A letters of the guess
are located correctly, the N is incorrectly located, and the C and E do not appear 
in the mystery word
"""

def get_color_sequence(guess,mystery_word):
  mystery_word_letters = get_character_dict(mystery_word)
  TOTAL_LETTERS = 5

  #generates a copy of the character dictionary to be modified
  #when comparing the guess with the mystery_word
  remaining_letters = mystery_word_letters.copy()

  color_sequence = [None for _ in range(TOTAL_LETTERS)]

  #first pass (to identify green letters)
  word_idx = 0
  for letter, correct_letter in zip(guess, mystery_word): 
    if (letter == correct_letter): 
      #set the letter color to be green and designate that it has been
      #successfully found in the remaining characters dictionary
      color_sequence[word_idx] = "green"
      remaining_letters[letter] -= 1
    word_idx += 1

  #make a second pass for the gray and yellow characters
  word_idx = 0
  for letter, correct_letter in zip(guess, mystery_word): 
    #ignore the green characters (already handled above)
    if (letter == correct_letter):
      pass 

    #if guess's letter does not appear at all in the mystery word, mark character as gary
    elif (letter not in remaining_letters):
      color_sequence[word_idx] = "gray"

    #if the letter has already been guessed successfully in the mystery word
    #with no more undiscovered repeats, mark character as gray
    #designed to handle cases with letters that repeat 
    elif (remaining_letters[letter] == 0):
      color_sequence[word_idx] = "gray"

    #in the case where the letter is not in the right place but appears in somewhere else
    #in the mystery word (remaining_letters[letter] > 0), mark the character as yellow
    else: 
      color_sequence[word_idx] = "yellow"
      remaining_letters[letter] -= 1

    word_idx += 1

  return color_sequence

"""
based on the Wordle color sequence generated by the guess, determine
whether another word candidate can be ruled out or not as the mystery word 
"""
def isValidCandidate(guess, colors, candidate): 
  TOTAL_LETTERS = 5
  indices = [i for i in range(TOTAL_LETTERS)]
  #first pass to identify the green colors
  for idx in range(TOTAL_LETTERS):
    if (colors[idx] == "green"):
      if (guess[idx] != candidate[idx]):
        #the candidate fails to match a letter with the mystery word
        return False 
      
      #otherwise, mark the letter with a 0 to indicate it has already been processed
      candidate_list = list(candidate)
      candidate_list[idx] = '0'
      candidate = "".join(candidate_list)
      indices.remove(idx)
  
  yellow_characters = []
  #all character indices that did not have a Wordle green color 
  non_green_indices = indices[:] 
  for idx in non_green_indices:
    if (colors[idx] == "yellow"):
      yellow_characters.append(guess[idx]) #keep track of yellow characters
      if (candidate.find(guess[idx]) == -1):
        #if a yellow character cannot be found among the candidate's characters, we can rule it out
        return False 
      if (candidate[idx] == guess[idx]):
        #if a candidate also has that letter in the wrong spot (marked yellow), we can rule it out
        return False 
      indices.remove(idx)
  
  #third and final pass through the remaining indices (all gray characters)
  for idx in indices: 
    if (candidate.find(guess[idx]) > -1 and guess[idx] not in yellow_characters):
      #if the candidate contains a letter that was marked gray and that letter
      #does not appear among the yellow letters, the candidate can be ruled out 
      return False 

  #otherwise, through all passes, we cannot rule out the candidate, so it remains valid
  return True 

"""
this functions takes a list of remaining_words, and based on the Wordle color sequence
of a previous attempts, removes all the remaining words that can be ruled out as the mystery word,
and returns then resulting list
"""
def reduce_candidate_pool(remaining_words, attempt, color_sequence):
  num_remaining_words = len(remaining_words)
  remaining_words_copy = remaining_words[:]

  for word_idx in range(num_remaining_words):
    candidate = remaining_words_copy[word_idx]
    #if the candidate can be ruled out, remove it from the list of remaining words
    if (isValidCandidate(attempt, color_sequence, candidate) == False):
      remaining_words.remove(candidate)
  return remaining_words

